// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)

  department Department[]
  professor  Professor?
}

model Field {
  id   Int    @id 
  name String @unique

  activities Activity[]
}

model Activity {
  id      Int    @id @default(autoincrement())
  name    String
  number  Int
  fieldId Int
  points  Int

  field              Field               @relation(fields: [fieldId], references: [id])
  submittedDocuments SubmittedDocument[]

  @@unique([fieldId, number])
}

model SubmittedDocument {
  id          Int    @id @default(autoincrement())
  url         String
  totalPoints Int
  activityId  Int
  processId   Int

  process  Process  @relation(fields: [processId], references: [id])
  activity Activity @relation(fields: [activityId], references: [id])
}

model Class {
  id     Int    @id
  name   String 
  letter String @db.Char(1)
  level  Int    @db.SmallInt

  professors Professor[]
  Process    Process[]
}

model Department {
  id         Int    @id @default(autoincrement())
  name       String @unique
  headUserId Int

  headUser   User        @relation(fields: [headUserId], references: [id])
  professors Professor[]
}

enum RegimeCategory {
  HALF_TIME
  FULL_TIME
  EXCLUSIVE
}

model Professor {
  id           Int            @id @default(autoincrement())
  name         String
  classId      Int
  departmentId Int
  userId       Int            @unique
  category     RegimeCategory

  class      Class      @relation(fields: [classId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  processes  Process[]
}

enum ProcessStatus {
  DRAFT
  ANALYSING
  APPROVED
  REJECTED
}

model Process {
  id              Int           @id @default(autoincrement())
  targetClassId   Int
  professorId     Int
  submittedAt     DateTime?
  finishedAt      DateTime?
  efetivationDate DateTime?
  createdAt       DateTime      @default(now())
  status          ProcessStatus @default(DRAFT)

  professor          Professor           @relation(fields: [professorId], references: [id])
  targetClass        Class               @relation(fields: [targetClassId], references: [id])
  submittedDocuments SubmittedDocument[]
}
